#+TITLE: Autosubst MetaCoq

This is a MetaCoq reimplementation of the Autosubst 2 code generator by Kathrin Stark. 
It uses the MetaCoq framework to implement a code generator for syntax with binders.

Like Autosubst 2, it supports well-scoped & unscoped syntax as well as variadic syntax and some functors like list and the codomain functor.

The MetaCoq reimplementation is unfortunately missing some features:
- generating lemmas with functional extensionality
- generating lemmas with the "pointwise_relation"
- generating the improved asimpl of Autosubst OCaml (uses the lemmas from the previous point)
- Notations

As such it is unfortunately an incomplete reimplementation. We can not automatically prove substitution equations like Autosubst 2 or Autosubst OCaml.
But it still generates inductive types and rewriting lemmas that can be used to manually prove substitution equations.


* Install
** Opam 
First, install opam following the [[https://opam.ocaml.org/doc/Install.html][directions for your operating system]].

** Switch
It is best practice to create a new opam switch to not cause conflicts with any of your other installed packages.
We will also need to add the Coq repository.
#+BEGIN_SRC bash
opam switch create autosubst-metacoq ocaml-base-compiler.4.09.1
opam repo add coq-released https://coq.inria.fr/opam/released
#+END_SRC

** Setup
You can install the dependencies with
#+BEGIN_SRC bash
opam install coq.8.13.1 coq-metacoq.1.0~beta2+8.13
#+END_SRC

You can compile all Coq sources with
#+BEGIN_SRC bash
make
#+END_SRC

* Run 
You can run Autosubst MetaCoq by requiring the Autosubst module.
In the file test/examples.v, you can find examples of how to run the program, as well as comments where to be careful.

In test/examples.v we prove a substitution equation for the untyped lambda calculus.
Because we're missing both the funext and the pointwise_relation lemmas, we use funext manually to prove the equation.

** Signatures
You specify the language for which to generate code with our input syntax.
The syntax is described in my thesis at https://www.ps.uni-saarland.de/~dapprich/bachelor.php
The only difference in the MetaCoq version of the syntax is that functors have special names ending in "F", e.g. codF and listF
and they are not contained in quotation marks.

There are several examples of languages in test/examples.v

The following example is for the call-by-value System F.
#+begin_src
Definition fcbv : autosubstLanguage :=
  {| al_sorts := <{ ty : Type;
                    tm : Type;
                    vl : Type }>;
    al_ctors := {{ arr : ty -> ty -> ty;
                   all : (bind ty in ty) -> ty;
                   app : tm -> tm -> tm;
                   tapp : tm -> ty -> tm;
                   vt : vl -> tm;
                   lam : ty -> (bind vl in tm) -> vl;
                   tlam : (bind ty in tm) -> vl }} |}.
#+end_src

* Repo
You can find the code at https://gitlab.com/uds-psl/autosubst-metacoq


